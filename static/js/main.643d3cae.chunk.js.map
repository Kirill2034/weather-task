{"version":3,"sources":["containers/Weather/Weather.module.css","components/Info/Info.module.css","components/ListCity/ListCity.module.css","hoc/Layout/Layout.module.css","components/Form/Form.js","components/Info/Info.js","components/ListCity/ListCity.js","containers/Weather/Weather.js","hoc/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","onSubmit","event","preventDefault","type","placeholder","value","this","props","onChange","onClick","React","Component","Info","className","classes","temp","humidity","rainfall","class","ListCity","children","Weather","state","infoWeather","city","errorMessage","listCity","onChangeText","setState","target","getCitiesHandler","getWeatherHandler","debounce","a","newState","fetch","response","json","data","Math","floor","main","name","console","log","suggestions","map","suggestion","address","getCity","index","key","style","color","Layout","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.643d3cae.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Weather\":\"Weather_Weather__36umG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Info\":\"Info_Info__OYzOc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ListCity\":\"ListCity_ListCity__2COFT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__1It-A\"};","import React from 'react'\r\nimport '../Form/Form.module.css'\r\n\r\nclass Form extends React.Component {\r\n\r\n    // getCitysHandler = async () => {\r\n    //     const input = document.getElementById('input')\r\n\r\n    //     const response = await fetch(`http://autocomplete.geocoder.api.here.com/6.2/suggest.json?app_id=8yvRrk4W4aaaD4r6R174&app_code=44jQRPjWC1J4gQBmEPYW4w&query=${input.value}`)\r\n    //     const data = await response.json();\r\n\r\n    //     const listCity = data.suggestions.map((suggestion) => {\r\n    //         return suggestion.address.city\r\n    //     })\r\n        \r\n    //     console.log(listCity) \r\n    // }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={(event) => event.preventDefault()}>\r\n                <input \r\n                  type=\"text\" \r\n                  placeholder=\"Город\" \r\n                  value={this.props.value} \r\n                  onChange={this.props.onChange} \r\n                />\r\n\r\n                <button \r\n                  onClick={this.props.onClick}>\r\n                    Получить погоду\r\n                </button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\nexport default Form;","import React from 'react'\r\nimport classes from '../Info/Info.module.css'\r\n\r\nconst Info = (props) => {\r\n    return (\r\n        <div className={classes.Info}>\r\n            {/* <p>Город: {props.city} </p> */}\r\n            <p>Температура: {props.temp} C<sup>o</sup> </p>\r\n            <p>Влажность: {props.humidity}% </p>\r\n            <p> {props.rainfall} </p>\r\n            <i className={props.class}/>\r\n        </div>\r\n    )\r\n}\r\nexport default Info;","import React from 'react'\r\nimport classes from '../ListCity/ListCity.module.css'\r\n\r\nconst ListCity = (props) => {\r\n    return (\r\n        <div className={classes.ListCity} onClick={props.onClick}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\nexport default ListCity","import React from 'react'\r\nimport classes from '../Weather/Weather.module.css'\r\nimport Form from '../../components/Form/Form'\r\nimport Info from '../../components/Info/Info'\r\nimport ListCity from '../../components/ListCity/ListCity'\r\nimport { debounce } from 'debounce'\r\n\r\n\r\n\r\nclass Weather extends React.Component {\r\n\r\n    state = {\r\n        infoWeather: false,\r\n        value: '',\r\n        city: null,\r\n        temp: null,\r\n        humidity: null,\r\n        rainfall: null,\r\n        errorMessage: false,\r\n        class: null,\r\n        listCity: []\r\n    }\r\n\r\n    onChangeText = event => {\r\n        this.setState({\r\n            value: event.target.value\r\n        }, this.getCitiesHandler)\r\n    }\r\n\r\n    getWeatherHandler = debounce(async () => {\r\n        try {\r\n        const newState = {}\r\n\r\n        if (this.state.value) {\r\n\r\n            const response = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=536ed34d2858d4e397f4175a4e5395a6`)\r\n            const data = await response.json()\r\n            const temp = Math.floor(data.main.temp - 273.15)\r\n\r\n            newState.temp = temp\r\n            newState.humidity = data.main.humidity\r\n            newState.infoWeather = true\r\n            newState.errorMessage = false\r\n\r\n            if (newState.temp > 0 && newState.humidity >= 50) {\r\n\r\n                newState.rainfall = 'Возможны осадки в виде дождя'\r\n                newState.class = 'fa fa-tint'\r\n\r\n            } else {\r\n\r\n                newState.rainfall = 'Возможны осадки в виде снега'\r\n                newState.class = 'fa fa-snowflake'\r\n            }\r\n\r\n            if (!!data.name) {\r\n                newState.city = data.name\r\n            }\r\n\r\n        } else {\r\n            newState.infoWeather = false\r\n            newState.value = ''\r\n            newState.city = null\r\n            newState.temp = null\r\n            newState.humidity = null\r\n            newState.rainfall = null\r\n            newState.errorMessage = true \r\n        }\r\n\r\n        this.setState(newState)\r\n    } catch(e) {\r\n        console.log(e)\r\n    }\r\n   }, 300)\r\n\r\n\r\n   getCitiesHandler = debounce(async () => {\r\n\r\n        if (this.state.value === '') {\r\n\r\n            this.setState({\r\n                listCity: []\r\n            })\r\n\r\n        } else {\r\n\r\n            const response = await fetch(`http://autocomplete.geocoder.api.here.com/6.2/suggest.json?app_id=8yvRrk4W4aaaD4r6R174&app_code=44jQRPjWC1J4gQBmEPYW4w&query=${this.state.value}`)\r\n            const data = await response.json();\r\n\r\n            const listCity = data.suggestions.map((suggestion) => {\r\n                return suggestion.address.city\r\n            })\r\n            \r\n            this.setState({listCity})\r\n        }\r\n}, 300)\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.Weather}>\r\n                <h1>Погода по всему миру</h1>\r\n                <Form \r\n                onClick={this.getWeatherHandler}\r\n                getCity={this.getCitiesHandler}\r\n                value={this.state.value}\r\n                onChange={this.onChangeText}\r\n                />\r\n                {this.state.listCity.map((city, index) => {\r\n                    return (\r\n                    <ListCity \r\n                        key={index} \r\n                        onClick={() => this.setState({value: city, listCity: []})}\r\n                    >\r\n                    {city}\r\n                    </ListCity>\r\n                    )\r\n                })}\r\n                {this.state.errorMessage ? <p style={{color: 'red'}}>Введите город</p> : null}\r\n                {this.state.infoWeather &&\r\n                 <Info\r\n                    city={this.state.city}\r\n                    temp={this.state.temp}\r\n                    humidity={this.state.humidity}\r\n                    rainfall={this.state.rainfall}\r\n                    class={this.state.class}\r\n                    /> \r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Weather;","import React from 'react'\r\nimport classes from '../Layout/Layout.module.css'\r\n\r\nclass Layout extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className={classes.Layout}>\r\n                <main>\r\n                    { this.props.children }\r\n                </main>   \r\n         </div>\r\n        )\r\n    }\r\n}\r\nexport default Layout","import React from 'react'\r\nimport Weather from './containers/Weather/Weather'\r\nimport Layout from './hoc/Layout/Layout'\r\nimport {Route, Switch} from 'react-router-dom'\r\n\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Layout>\r\n          <Switch>\r\n            <Route path={'/'} component={Weather} />\r\n          </Switch>\r\n        </Layout>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {BrowserRouter} from 'react-router-dom'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}